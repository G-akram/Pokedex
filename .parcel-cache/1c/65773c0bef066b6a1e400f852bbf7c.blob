"use strict";

var model = _interopRequireWildcard(require("./model"));

var _searchView = _interopRequireDefault(require("./views/searchView"));

var _pokemonView = _interopRequireDefault(require("./views/pokemonView"));

var _listView = _interopRequireDefault(require("./views/listView"));

var _paginationView = _interopRequireDefault(require("./views/paginationView"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const controlPokemon = async function (pokemon) {
  window.location = `#${pokemon}`;

  _pokemonView.default.renderSpinner();

  try {
    await model.loadPokemon(pokemon);

    _pokemonView.default.render(model.getPokemon());
  } catch (err) {
    // console.log(err);
    _pokemonView.default.renderError('sorry pokemon not found ! , you can try pikachu or charmander for example');
  }
};

const controlSearchResult = function () {
  const userInput = _searchView.default.getQuery();

  if (!userInput) return;
  controlPokemon(userInput);
};

const controlVisitPokemon = function (pokemon) {
  controlPokemon(pokemon);
}; //types results


const controlResults = async function () {
  // load first page of pokemons
  controlPokemonListToRender();
};

const controlPokemonListToRender = async function (page = 1) {
  const hash = window.location.hash;
  if (!hash.includes('type')) return;
  const type = hash.slice(1).split('-')[1];
  if (!type) return;

  try {
    _listView.default.renderSpinner();

    if (type === 'all') {
      await model.loadAllPokemon(page);
    } else {
      await model.loadAllPokemonType(type, page);
    }

    _listView.default.render(model.getPokemonList());

    _paginationView.default.render(model.getSearch());
  } catch (err) {
    console.log(err);

    _pokemonView.default.renderError('sorry an mysterious error occurred , try again pls !');
  }
};

const controlPagination = function (goToPage) {
  // load the REQUESTED PAGE of pokemons
  controlPokemonListToRender(goToPage);
};

const init = function () {
  _searchView.default.addHandlerSearch(controlSearchResult);

  _pokemonView.default.addHandlerVisit(controlVisitPokemon);

  _listView.default.addHandlerRender(controlResults);

  _paginationView.default.addHandlerClick(controlPagination);
};

init();