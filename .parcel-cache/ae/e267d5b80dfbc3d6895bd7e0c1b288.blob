"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/svg/icons.svg"));

var _view = _interopRequireDefault(require("./view"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _view.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector('.footer .container'));
  }

  addHandlerClick(handler) {
    this._parentElement.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn-pagination');
      if (!btn) return;
      const goToPage = +btn.dataset.goto;
      handler(goToPage);
    });
  }

  render(data) {
    this._data = data;

    let markup = this._generateMarkup();

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  _generateMarkup() {
    const curPage = this._data.currentPage;
    const numPages = Math.ceil(this._data.numberOfPages / this._data.resultsPerPage); // Page 1, and there are other pages

    if (curPage === 1 && numPages > 1) {
      return `
            <button  data-goto="${curPage + 1}" class="btn btn--next btn-pagination">
            <p>page ${curPage + 1}</p>
            <svg class="fav__icon">
                <use href="${_icons.default}#right-arrow"></use>
            </svg>
        </button>
            
	  `;
    } // Last page


    if (curPage === numPages && numPages > 1) {
      return `
            <button data-goto="${curPage - 1}" class="btn btn--previous btn-pagination">
            
				<svg class="fav__icon">
					<use href="${_icons.default}#left-arrow"></use>
				</svg>
				<p>page ${curPage - 1}</p>
            </button>
	  `;
    } // Other page


    if (curPage < numPages) {
      return `
            <button data-goto="${curPage - 1}" class="btn btn--previous btn-pagination">

            <svg class="fav__icon">
            <use href="${_icons.default}#left-arrow"></use>
            </svg>
            <p>page ${curPage - 1}</p>
            </button>
        

        <button  data-goto="${curPage + 1}" class="btn btn--next btn-pagination">
        <p>page ${curPage + 1}</p>
        <svg class="fav__icon">
                <use href="${_icons.default}#right-arrow"></use>
            </svg>
    </button>
	  `;
    } // Page 1, and there are NO other pages


    return '';
  }

}

var _default = new PaginationView();

exports.default = _default;